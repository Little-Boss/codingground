/* package whatever; // don't place package name! */

import java.util.*;
import java.util.Scanner;
import java.lang.*;
import java.io.*;
import java.io.IOException;

/* Name of the class has to be "Main" only if the class is public. */
class Cipher
{
	private String myKeyText, myMessageText;
	private String[] myKey, myMessage;
	private String myUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ,.<>?'\":;`1234567890-=~!@#$%^&*()_+";
	
	public Cipher( String keyText, String messageText )
	{
		//stores inputs in original form
		myKeyText = keyText;
		myMessageText = messageText;
		
		//Changes inputs to upper case
		keyText = keyText.toUpperCase();
		messageText = messageText.toUpperCase();
		
		//initalizes arrays of key and message to desired length
		myKey = new String[messageText.length()];
		myMessage = new String[messageText.length()];
		
		//makes key an array of strings
		//plans for future: imploment caesar cipher at each itteration of the key (key = ABC -> BCD -> CDE -> etc.)
		int cycleKey = 0;
		for( int i = 0; i < messageText.length(); i++ )
		{
			if( cycleKey == keyText.length() )
			{
				cycleKey = 0;
			}
			myKey[i] = keyText.substring( cycleKey, cycleKey + 1 );
			cycleKey++;
		}
		
		//makes message an array of strings
		for( int i = 0; i < messageText.length(); i++ )
		{
			myMessage[i] = messageText.substring( i, i + 1 );
		}
	}
	
	//returns the key and message entered
	public String getText()
	{
		return "Key: " + myKeyText + "\nMessage: " + myMessageText;
	}
	
	//returns the arrays of key and message as a string
	public String getArrays()
	{
		String result = "Key:\n";
		for( String letter : myKey )
		{
			result += letter + " ";
		}
		
		result += "\nMessage:\n";
		for( String letter : myMessage )
		{
			result += letter + " ";
		}
		
		return result;
	}
	
	//this is the ciphering method
	public String processMessage()
	{
		String crypticMessage = "";
        for( int i = 0; i < myMessage.length; i++ )
        {
            if( myUpperCase.indexOf(myMessage[i]) > myUpperCase.indexOf(myKey[i]) )
            {
                int position = myUpperCase.length() - (myUpperCase.indexOf(myMessage[i]) - myUpperCase.indexOf(myKey[i]) );
                crypticMessage += myUpperCase.substring( position, position + 1 );
            }else
            if( myUpperCase.indexOf(myMessage[i]) <= myUpperCase.indexOf(myKey[i]) )
            {
                int position = myUpperCase.indexOf(myKey[i]) - myUpperCase.indexOf(myMessage[i]);
                crypticMessage += myUpperCase.substring( position, position + 1 );
            }
        }
        
        return crypticMessage;
	}
}



public class Main
{
    public static void main (String[] args) throws java.lang.Exception
    {
        
        //initializes my thingy things
        String upperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ,.<>?'\":;`1234567890-=~!@#$%^&*()_+";
        Scanner scanner = new Scanner(System.in);
        String key = "";
        String message = "";
        String yesOrNo = "";
        boolean inputKey = true;
        boolean cleared = true;
        
        
        for( int again = 0; again < 1; again++ )
        {
            if( cleared )
            {
                System.out.println( "Progam is not case-sensitive, and available characters are:\n" + upperCase + "\n" );
            }
            cleared = false;
            
            if( inputKey )
            {
                //sets key
                System.out.print( "Please enter your key\nKey: " );
                key = scanner.nextLine();
                System.out.println();
                
                //looking for invalid characters
                int keyTest = 1;
                for( int j = 0; j < keyTest; j++ )
                {
                    key = key.toUpperCase();
                    String keyInvalids = "";
                    boolean keyHasError = false;
                    for( int i = 0; i < key.length(); i++ )
                    {
                        if( upperCase.indexOf(key.substring(i,i+1)) < 0 )
                        {
                            keyInvalids += "\"" + key.substring(i,i+1) + "\", ";
                            keyHasError = true;
                        }
                    }
                    if( keyHasError )
                    {
                        System.out.println( keyInvalids + "Please use only the following: " + upperCase );
                        System.out.print( "Key: " );
                        key = scanner.nextLine();
                        System.out.println();
                        keyTest++;
                    }
                }
            }
            
            //sets message
            System.out.print( "Please enter your message\nMessage: " );
            message = scanner.nextLine();
            System.out.println();
            //looking for invalid characters
            int messageTest = 1;
            for( int j = 0; j < messageTest; j++ )
            {
                message = message.toUpperCase();
                String messageInvalids = "";
                boolean messageHasError = false;
                for( int i = 0; i < message.length(); i++ )
                {
                    if( upperCase.indexOf(message.substring(i,i+1)) < 0 )
                    {
                        messageInvalids += "\"" + message.substring(i,i+1) + "\", ";
                        messageHasError = true;
                    }
                }
                if( messageHasError )
                {
                    System.out.println( messageInvalids + "\nPlease use only the following: " + upperCase );
                    System.out.print( "Message: " );
                    message = scanner.nextLine();
                    System.out.println();
                    messageTest++;
                }
            }
            
            //initializes a Cipher class from user input
            Cipher wammo = new Cipher( key, message );
            //System.out.println( wammo.getArrays() );
            //System.out.println( wammo.getText() );
            System.out.println( wammo.processMessage() );
            
            //Change key?
            System.out.println( "\nWould you like to keep your key? (Yes or No)" );
            System.out.println( "(Type \"clear\" to clear the console)" );
            yesOrNo = scanner.nextLine();
            if( yesOrNo.toUpperCase().equals("YES") )
            {
                //System.out.println( "\n\n\n\n\n\n\n\n" );
                inputKey = false;
			}else
			{
			    inputKey = true;
			}
			System.out.println( "\n" );
			if( yesOrNo.toUpperCase().equals("CLEAR"))
			{
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                cleared = true;
            }
			again--;
		}
	}
}
